// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  processing
  approved
  shipped
  delivered
  cancelled
}

// USER MODELS

model User {
  id       String @id @default(uuid())
  name     String
  lastname String
  email    String @unique
  phone    String
  password String
  role     Role   @default(user)

  isConfirmed   Boolean @default(false)
  isUserDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders         Order[]
  addresses      UserAddress[]
  ContactMessage ContactMessage[]
}

model UserAddress {
  id                   String   @id @default(uuid())
  firstName            String
  lastName             String
  city                 String
  typeOfIdentification String
  identification       String
  phone                String
  address              String
  address2             String?
  postalCode           String
  department           String
  extraData            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

// PRODUCT MODELS

model Category {
  id   String @id @default(uuid())
  name String

  Product Product[]
}

model Product {
  id               String   @id @default(uuid())
  name             String
  description      String
  price            Float
  stock            Int
  slug             String
  discount         Float    @default(1)
  isProductDeleted Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  orderItem    OrderItem[]
  productImage ProductImage[]
}

model ProductImage {
  id       String  @id @default(uuid())
  url      String
  publicId String?

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// ORDER MODELS

model Order {
  id            String      @id @default(uuid())
  tax           Float
  discount      Float       @default(0)
  subtotal      Float
  total         Float
  itemsInOrder  Int
  orderStatus   OrderStatus @default(pending)
  paidAt        DateTime?
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  OrderItem     OrderItem[]
  OrderAddress  OrderAddress?
  OrderTracking OrderTracking?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  discount Float  @default(1)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model OrderAddress {
  id                   String  @id @default(uuid())
  firstName            String
  lastName             String
  city                 String
  typeOfIdentification String
  identification       String
  phone                String
  address              String
  address2             String?
  postalCode           String
  department           String
  extraData            String?

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
}

model OrderTracking {
  id           String @id @default(uuid())
  company      String
  trackingCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String? @unique
  order   Order?  @relation(fields: [orderId], references: [id])
}

// DEPARTMENTS AND CITIES

model Location {
  id         String   @id @default(uuid())
  department String
  cities     String[]
}

// CONTACT

model Contact {
  id        String   @id @default(uuid())
  fullName  String
  phone     String
  email     String
  createdAt DateTime @default(now())

  ContactMessage ContactMessage[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  userRole  Role     @default(user)
  message   String
  createdAt DateTime @default(now())

  contactId String
  contact   Contact @relation(fields: [contactId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}
