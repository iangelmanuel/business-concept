// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

// USER MODELS

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  lastname  String
  password  String
  role      Role     @default(user)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  addresses UserAddress[]
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId Int
  User   User @relation(fields: [userId], references: [id])
}

// PRODUCT MODELS

model Category {
  id   Int    @id @default(autoincrement())
  name String

  Product Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  orderItem    OrderItem[]
  productImage ProductImage[]
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

// ORDER MODELS

model Order {
  id            Int       @id @default(autoincrement())
  subtotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean   @default(false)
  paidAt        DateTime?
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
}

model OrderAddress {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
}
